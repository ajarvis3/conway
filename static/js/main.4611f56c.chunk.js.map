{"version":3,"sources":["recoil-state/width.ts","recoil-state/height.ts","recoil-state/run.ts","control/RunButton.tsx","control/Control.tsx","conway/hooks/useInterval.ts","conway/types/Conway.ts","conway/Game.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["widthState","atom","key","default","heightState","runState","RunButton","useRecoilState","run","setRun","onClick","ControlItem","props","state","setState","label","type","onChange","event","parseInt","target","value","Control","width","setWidth","height","setHeight","id","useInterval","callback","delay","savedCallback","useRef","useEffect","current","setInterval","clearInterval","Conway","alive","this","Array","fill","map","row","column","newConway","x","slice","r","c","count","Game","useRecoilValue","boxWidth","boxHeight","canvasRef","runRef","useState","game","setGame","ctx","getContext","clearRect","lineWidth","h","w","console","log","fillColor","borderColor","fillStyle","strokeStyle","y","fillRect","beginPath","rect","stroke","runRound","useCallback","Math","floor","nativeEvent","offsetX","offsetY","toggleAlive","ref","window","innerHeight","App","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4611f56c.chunk.js","sourcesContent":["import { atom } from \"recoil\";\r\n\r\nconst widthState = atom({\r\n   key: \"widthState\",\r\n   default: 5,\r\n});\r\n\r\nexport default widthState;\r\n","import { atom } from \"recoil\";\r\n\r\nconst heightState = atom({\r\n   key: \"heightState\", // unique ID (with respect to other atoms/selectors)\r\n   default: 5, // default value (aka initial value)\r\n});\r\n\r\nexport default heightState;\r\n","import { atom } from \"recoil\";\r\n\r\nconst runState = atom({\r\n   key: \"runState\",\r\n   default: false,\r\n});\r\n\r\nexport default runState;\r\n","import { useRecoilState } from \"recoil\";\r\nimport { runState } from \"../recoil-state\";\r\n\r\nconst RunButton = () => {\r\n   const [run, setRun] = useRecoilState(runState);\r\n\r\n   return <button onClick={() => setRun(!run)}>{run ? \"Stop\" : \"Run\"}</button>;\r\n};\r\n\r\nexport default RunButton;\r\n","import React from \"react\";\r\nimport { useRecoilState } from \"recoil\";\r\nimport { heightState, widthState } from \"../recoil-state\";\r\nimport RunButton from \"./RunButton\";\r\nimport IControlProps from \"./types/ControlProps\";\r\n\r\nconst ControlItem = (props: IControlProps) => {\r\n   const { state, setState, label } = props;\r\n   const onChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n      setState(parseInt(event.target.value));\r\n   };\r\n\r\n   return (\r\n      <span>\r\n         {label}:\r\n         <input type=\"number\" onChange={onChange} value={state} />\r\n      </span>\r\n   );\r\n};\r\n\r\nconst Control = () => {\r\n   const [width, setWidth] = useRecoilState(widthState);\r\n   const [height, setHeight] = useRecoilState(heightState);\r\n\r\n   return (\r\n      <div id=\"control\">\r\n         <ControlItem state={width} setState={setWidth} label=\"Width\" />\r\n         <ControlItem state={height} setState={setHeight} label=\"Height\" />\r\n         <RunButton />\r\n      </div>\r\n   );\r\n};\r\n\r\nexport default Control;\r\n","import { useRef, useEffect } from \"react\";\r\n\r\nfunction useInterval(callback: () => void, delay: number | null) {\r\n   const savedCallback = useRef(callback);\r\n\r\n   // Remember the latest callback if it changes.\r\n   useEffect(() => {\r\n      savedCallback.current = callback;\r\n   }, [callback]);\r\n\r\n   // Set up the interval.\r\n   useEffect(() => {\r\n      // Don't schedule if no delay is specified.\r\n      if (delay === null) {\r\n         return;\r\n      }\r\n\r\n      const id = setInterval(() => savedCallback.current(), delay);\r\n\r\n      return () => clearInterval(id);\r\n   }, [delay]);\r\n}\r\n\r\nexport default useInterval;\r\n","class Conway {\r\n   alive: boolean[][];\r\n   width: number;\r\n   height: number;\r\n\r\n   constructor(width: number, height: number) {\r\n      this.width = width;\r\n      this.height = height;\r\n      this.alive = new Array(height)\r\n         .fill(false)\r\n         .map(() => new Array(width).fill(false));\r\n   }\r\n\r\n   /**\r\n    * Sets cell at row, column to be alive\r\n    * @param row\r\n    * @param column\r\n    */\r\n   toggleAlive(row: number, column: number) {\r\n      const newConway = new Conway(this.width, this.height);\r\n      newConway.alive = this.alive.map((x) => x.slice());\r\n      newConway.alive[row][column] = !this.alive[row][column];\r\n      return newConway;\r\n   }\r\n\r\n   /**\r\n    * Does a single round of the Game of Life\r\n    */\r\n   runRound() {\r\n      const newConway = new Conway(this.width, this.height);\r\n      newConway.alive = this.alive.map((x) => x.slice());\r\n      for (var r = 0; r < this.height; r++) {\r\n         for (var c = 0; c < this.width; c++) {\r\n            var count = 0;\r\n            if (r > 0 && this.alive[r - 1][c]) count += 1;\r\n            if (r < this.height - 1 && this.alive[r + 1][c]) count += 1;\r\n            if (c > 0 && this.alive[r][c - 1]) count += 1;\r\n            if (c < this.width - 1 && this.alive[r][c + 1]) count += 1;\r\n            if (r > 0 && c > 0 && this.alive[r - 1][c - 1]) count += 1;\r\n            if (r > 0 && c < this.width - 1 && this.alive[r - 1][c + 1])\r\n               count += 1;\r\n            if (r < this.height - 1 && c > 0 && this.alive[r + 1][c - 1])\r\n               count += 1;\r\n            if (\r\n               r < this.height - 1 &&\r\n               c < this.width - 1 &&\r\n               this.alive[r + 1][c + 1]\r\n            )\r\n               count += 1;\r\n            if (count < 2 || count > 3) {\r\n               newConway.alive[r][c] = false;\r\n            } else if (!this.alive[r][c] && count === 3) {\r\n               newConway.alive[r][c] = true; // otherwise it's already true\r\n            }\r\n         }\r\n      }\r\n      return newConway;\r\n   }\r\n}\r\n\r\nexport default Conway;\r\n","import { useCallback, useEffect, useRef, useState } from \"react\";\r\nimport { useRecoilValue } from \"recoil\";\r\nimport { heightState, runState, widthState } from \"../recoil-state\";\r\nimport useInterval from \"./hooks/useInterval\";\r\nimport Conway from \"./types/Conway\";\r\n\r\nconst Game = () => {\r\n   const width = useRecoilValue(widthState);\r\n   const height = useRecoilValue(heightState);\r\n   const run = useRecoilValue(runState);\r\n\r\n   const boxWidth = useRef(0);\r\n   const boxHeight = useRef(0);\r\n\r\n   const canvasRef = useRef<HTMLCanvasElement>(null);\r\n   const runRef = useRef(() => {});\r\n   const [game, setGame] = useState<Conway>(new Conway(width, height));\r\n\r\n   useEffect(() => {\r\n      if (!canvasRef || !canvasRef.current) return;\r\n      const ctx = canvasRef.current.getContext(\"2d\");\r\n      ctx!.clearRect(0, 0, canvasRef.current.width, canvasRef.current.height);\r\n      ctx!.lineWidth = 3;\r\n      for (var h = 0; h < game.height; h++) {\r\n         for (var w = 0; w < game.width; w++) {\r\n            console.log(w, h, game);\r\n            const fillColor = game.alive[h][w] ? \"#ffffff\" : \"#000000\";\r\n            const borderColor = game.alive[h][w] ? \"#000000\" : \"#ffffff\";\r\n            ctx!.fillStyle = fillColor;\r\n            ctx!.strokeStyle = borderColor;\r\n            const x = w * boxWidth.current;\r\n            const y = h * boxHeight.current;\r\n            ctx!.fillRect(x, y, boxWidth.current, boxHeight.current);\r\n            ctx!.beginPath();\r\n            ctx!.rect(x, y, boxWidth.current, boxHeight.current);\r\n            ctx!.stroke();\r\n         }\r\n      }\r\n   }, [game, width, height]);\r\n\r\n   useEffect(() => {\r\n      if (!canvasRef) return;\r\n      setGame(new Conway(width, height));\r\n      boxWidth.current = canvasRef.current!.width / width;\r\n      boxHeight.current = canvasRef.current!.height / height;\r\n   }, [width, height]);\r\n\r\n   useEffect(() => {\r\n      if (run) {\r\n         runRef.current = () => {\r\n            setGame(game.runRound());\r\n         };\r\n      } else {\r\n         runRef.current = () => {};\r\n      }\r\n   });\r\n\r\n   useInterval(() => {\r\n      runRef.current();\r\n   }, 1000);\r\n\r\n   const onClick = useCallback(\r\n      (event: React.MouseEvent<HTMLCanvasElement, MouseEvent>) => {\r\n         if (!canvasRef || !canvasRef.current) return;\r\n         const x = Math.floor(event.nativeEvent.offsetX / boxWidth.current);\r\n         const y = Math.floor(event.nativeEvent.offsetY / boxHeight.current);\r\n         setGame(game.toggleAlive(y, x));\r\n      },\r\n      [game]\r\n   );\r\n\r\n   return (\r\n      <canvas\r\n         id=\"conway-game\"\r\n         ref={canvasRef}\r\n         onClick={onClick}\r\n         width={window.innerHeight * 0.9}\r\n         height={window.innerHeight * 0.9}\r\n      ></canvas>\r\n   );\r\n};\r\n\r\nexport default Game;\r\n","import React from \"react\";\nimport \"./App.css\";\nimport { RecoilRoot } from \"recoil\";\nimport Control from \"./control/Control\";\nimport Game from \"./conway/Game\";\n\nfunction App() {\n   return (\n      <RecoilRoot>\n         <div className=\"App\">\n            <Control />\n            <Game />\n         </div>\n      </RecoilRoot>\n   );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}